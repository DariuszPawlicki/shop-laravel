user nginx;
worker_processes "${NGINX_WORKERS_COUNT}";

events {
  worker_connections 1024;
  multi_accept on;
}

http {
  charset UTF-8;
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  server_tokens off;

  keepalive_timeout 65s;
  client_max_body_size 100M;
  gzip on;
  expires -1;

  server {
    listen 80 default_server;

    server_name _;

    return 301 https://$host$request_uri;
}

  server {
    listen 443 ssl;
    listen [::]:443 ssl ipv6only=on;

    ssl_certificate /etc/nginx/ssl/default.crt;
    ssl_certificate_key /etc/nginx/ssl/default.key;

    root /application/public;

    index index.php;

    if ($request_uri ~ "^/index\.php/?(.*)$") {
      return 301 $scheme://$http_host/$1;
    }

    error_page 404 /index.php;
    try_files $uri /index.php$is_args$args;

    location ~ ^/index\.php(/|$) {
      fastcgi_pass "${NGINX_CGI_SERVER_HOST}:${NGINX_CGI_SERVER_PORT}";
      fastcgi_index index.php;
      fastcgi_split_path_info ^(.+\.php)(/.*)$;
      include /etc/nginx/fastcgi_params;
      fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
      fastcgi_param DOCUMENT_ROOT $realpath_root;

      add_header CI-API-Version "${APP_VERSION}" always;

      set $cors "";
      if ($http_origin ~* (.*\.${DOMAIN})) {
        set $cors "true";
      }

      if ($cors = "true") {
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Max-Age 1728000 always;
        add_header Access-Control-Allow-Methods 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,Set-Cookie' always;
        add_header Access-Control-Allow-Credentials true always;
      }
    }

    location ~* \.php$ {
      return 404;
    }

    location = /favicon.ico {
      access_log off;
      log_not_found off;
      expires max;
      return 204;
    }
  }

  access_log /dev/stdout;
}

error_log /dev/stderr error;
